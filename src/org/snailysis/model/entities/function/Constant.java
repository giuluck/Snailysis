package org.snailysis.model.entities.function;

import java.io.Serializable;
import java.util.Optional;

import org.apache.commons.math3.fraction.Fraction;

/**
 * Manages a constant function in the real field.
 */
public final class Constant extends AbstractPolynomial2D implements Serializable {

    private static final long serialVersionUID = -8429553730088477683L;

    private final double value;

    /**
     * Package-private constructor that creates the function f(x) = value.
     */
    Constant(final double value) {
        super();
        this.value = value;
    }

    @Override
    public Function2D add(final Function2D gx) {
        if (Constant.class.isInstance(gx)) {
            return new Constant(gx.evaluateAt(0) + value);
        } else {
            return gx.add(this);
        }
    }

    @Override
    public Function2D multiply(final Function2D gx) {
        if (Constant.class.isInstance(gx)) {
            return new Constant(gx.evaluateAt(0) * value);
        } else {
            return gx.multiply(this);
        }
    }

    @Override
    public Function2D compose(final Function2D gx) {
        return this.getCopy(); // f(x) = k -> f(g(x)) = k
    }

    @Override
    public Function2D differentiate() {
        return new Constant(0); // f(x) = k -> f'(k) = 0
    }

    @Override
    public Function2D integrate() {
        /*
         * - f(x) = 0 -> Sf(x)dx = 0
         * - f(x) = k -> Sf(x)dx = kx
         */
        return value == 0 ? new Constant(0) : new BasicPolynomial2D(value, 1);
    }

    @Override
    public double evaluateAt(final double x) {
        return value;
    }

    @Override
    public String toString() {
        return new Fraction(value).toString().replace(" ", "");
    }

    /* AUTO-GENERATED by Eclipse */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(value);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    @Override
    public boolean equals(final Object obj) {
        return Optional.ofNullable(obj)
                       .filter(o -> getClass().equals(o.getClass()))
                       .map(o -> (Constant) o)
                       .filter(o -> o.value == this.value)
                       .isPresent();
    }
}
